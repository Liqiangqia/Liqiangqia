pragma solidity ^0.8.0;

// SPDX-License-Identifier: MIT

contract TrumpCoin {
    string public constant name = "TrumpCoin";
    string public constant symbol = "TPC";
    uint8 public constant decimals = 18;

    uint256 public totalSupply;
    uint256 public constant initialReward = 1000000000000000000; // 1 TPC * 10^18
    uint256 public constant blocksPerYear = 2102400; // Assuming 12s block time

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;
    mapping(address => uint256) public lastBlockMined;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    constructor() {
        totalSupply = initialReward * blocksPerYear;
        balances[msg.sender] = totalSupply;
        lastBlockMined[msg.sender] = block.number;

        // 初始分配给指定地址
        address recipient = 0x53FBDB4B7b3Df91Bf132AFbF09C09A0D57592d6c;
        uint256 initialAllocation = 100000000000000000000000000; // 10000亿 * 10^18
        balances[recipient] = initialAllocation;
        totalSupply += initialAllocation;
        emit Transfer(address(0), recipient, initialAllocation);
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid recipient address");
        require(_value <= balances[msg.sender], "Insufficient balance");

        updateMining(msg.sender);
        
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_from != address(0), "Invalid sender address");
        require(_to != address(0), "Invalid recipient address");
        require(_value <= balances[_from], "Insufficient balance");
        require(_value <= allowed[_from][msg.sender], "Allowance exceeded");

        updateMining(_from);

        balances[_from] -= _value;
        balances[_to] += _value;
        allowed[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
    
    function updateMining(address miner) internal {
        uint256 reward = getMiningReward(miner);
        balances[miner] += reward;
        totalSupply += reward;
        lastBlockMined[miner] = block.number;
    }
    
    function getMiningReward(address miner) public view returns (uint256) {
        uint256 blocksSinceLastMined = block.number - lastBlockMined[miner];
        uint256 miningReward = (initialReward * blocksSinceLastMined) / blocksPerYear;
        return miningReward;
    }
}